/**
 * Description: a program that inserts a thousand records into a database, and compare the performance with and without batch updates, 
 * Brianna Manning
 * 10.1.2024
 * BriannaManning_M06_2
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DatabasePerformanceComparison {

    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/your_database_name";
        String user = "your_username";
        String password = "your_password";

        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement("INSERT INTO Temp(num1, num2, num3) VALUES (?, ?, ?)");

            // Without batch updates
            long startTime = System.currentTimeMillis();
            for (int i = 0; i < 1000; i++) {
                statement.setDouble(1, Math.random());
                statement.setDouble(2, Math.random());
                statement.setDouble(3, Math.random());
                statement.executeUpdate();
            }
            long endTime = System.currentTimeMillis();
            System.out.println("Time taken without batch updates: " + (endTime - startTime) + " ms");

            // With batch updates
            statement.clearParameters();
            startTime = System.currentTimeMillis();
            for (int i = 0; i < 1000; i++) {
                statement.setDouble(1, Math.random());
                statement.setDouble(2, Math.random());
                statement.setDouble(3, Math.random());
                statement.addBatch();
            }
            statement.executeBatch();
            endTime = System.currentTimeMillis();
            System.out.println("Time taken with batch updates: " + (endTime - startTime) + " ms");

            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
