import java.util.ListIterator;
import java.util.NoSuchElementException;

public class Node<E> {
    E element;
    Node<E> next;
    Node<E> previous;

    public Node(E e) {
        element = e;
    }
}

interface MyList<E> {
    // Define methods to be implemented
}

public class TwoWayLinkedList<E> implements MyList<E> {
    private Node<E> head, tail;
    private int size = 0; // Number of elements in the list

    @Override
    public ListIterator<E> listIterator() {
        return new LinkedListIterator();
    }

    @Override
    public ListIterator<E> listIterator(int index) {
        // Implement to set the cursor to the element at the specified index
        // Return an instance of ListIterator<E>
        return null;
    }

    private class LinkedListIterator implements ListIterator<E> {
        private Node<E> current = head; // Current index

        @Override
        public boolean hasNext() {
            return (current != null);
        }

        // Implement other methods in ListIterator interface
    }

    // Implement add, remove, clear, contains, get, indexOf, lastIndexOf, set, etc.
}


public class MyLinkedList<E> implements MyList<E> {
    private Node<E> head, tail;
    private int size = 0; // Number of elements in the list

    public MyLinkedList() {
    }

    public MyLinkedList(E[] objects) {
        for (int i = 0; i < objects.length; i++)
            add(objects[i]);
    }

    public void add(E element) {
        // Implement adding element to the list
    }

    // Implement other methods such as getFirst, getLast, clear, contains, get, indexOf, lastIndexOf, set, etc.
}

    public String toString() {
        StringBuilder result = new StringBuilder("[");

        Node<E> current = head;
        for (int i = 0; i < size; i++) {
            result.append(current.element);
            current = current.next;
            if (current != null) {
                result.append(", ");
            } else {
                result.append("]");
            }
        }

        return result.toString();
    }

    public void clear() {
        size = 0;
        head = tail = null;
    }

    public boolean contains(Object e) {
        return true; // Left as an exercise
    }

    public E get(int index) {
        return null; // Left as an exercise
    }

    public int indexOf(Object e) {
        return 0; // Left as an exercise
    }

    public int lastIndexOf(E e) {
        return 0; // Left as an exercise
    }

    public E set(int index, E e) {
        return null; // Left as an exercise
    }

    public java.util.Iterator<E> iterator() {
        return new TwoWayLinkedList<E>().listIterator();
    }
}
